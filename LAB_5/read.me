Требуется реализовать функцию, находящую решение задачи коммивояжера (Travelling Salesman Problem, TSP) (функция tsp)

Алгоритм полного перебора:
G - граф, start - стартовая вершина


TSP(G, start):	
	Permutations - множество всех возможных перестановок вершин графа
	Вернуть перестановку из Permutations, дающую валидный кратчайший маршрут (т.е. с минимальной суммой весов ребер), начинающийся в start


Метод ветвей и границ:
Length(Path) - возвращает длину маршрута Path
MinPath(P1, P2) - из двух маршрутов возвращает кратчайший маршрут
LowerBound(G, S) - возвращает нижнюю оценку длины маршрута в графе G для подмножества решений S
G - граф, start - стартовая вершина


TSP_BnB(G, start):
	BestPath = некоторое эвристическое решение или ∅
	Visited = {start} - список пройденных вершин
	Вернуть BnB(G, Visited, BestPath)


BnB(G, Visited, BestPath):
	Если Visited содержит все вершины графа G:		
		Вернуть MinPath(BestPath, Visited)
	Для каждой вершины v графа G не из Visited:
		VNext = Visited + {v}
Если LowerBound(VNext) < Length(BestPath):
Path = BnB(G, VNext, BestPath)
		BestPath = MinPath(BestPath, Path)
	Вернуть BestPath


LowerBound(G, Visited):
	Для каждой вершины графа G найти два смежных с ней ребра с минимальным весом, с учетом уже построенной части маршрута Visited: ребра, входящие в маршрут, рассматриваются в первую очередь
	Вернуть сумму весов таких двух ребер для каждой вершины по всем вершинам графа G, поделенную на 2


Жадный алгоритм:
G - граф, start - стартовая вершина


TSP_Greedy(G, start):	
	Current = start
	Path = {Current}
	Пока Path не содержит все вершины графа:
		Next - смежная с Current еще не посещенная (не в Path) вершина графа, с минимальным весом ребра
		Path = Path + Next (добавить Next в конец Path)
		Current = Next
	Вернуть Path как результат
