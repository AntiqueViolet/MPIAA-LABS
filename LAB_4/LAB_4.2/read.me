Реализовать (по выбору) алгоритм Крускала или Прима поиска минимального остовного дерева во связном взвешенном графе (функция min_spanning_tree).

Алгоритм Крускала:
G - граф


Kruskal(G):	
	Создать для каждой вершины v графа G отдельную компоненту {v}
	MST = {} - ребра минимального остовного дерева
	Для каждого ребра (u, v) графа G, в порядке возрастания весов:
		Если вершины u и v принадлежат разным компонентам:
			Добавить ребро (u, v) в MST
			Объединить две компоненты в одну ребром (u, v)
	Вернуть MST как результат


Алгоритм Прима:
G - граф, s - стартовая вершина
MinWeight - ассоциативный массив, хранящий для каждой вершины вес минимального ребра, соединяющего ее с вершиной в дереве
Parent - ассоциативный массив, хранящий для каждой вершины ее предка в минимальном остовном дереве
Weight(u, v) - вес ребра (u, v)


Prim(G, s):	
	Для каждой вершины v графа G:
		MinWeight[v] = Infinity
	MinWeight[s] = 0
	Q = G.V
	Пока Q не пусто:
		u = извлечь вершину из Q с минимальным значением MinWeight
		Для каждой вершины v смежной с u:
			Если v в Q и MinWeight[v] > Weight(u, v):
				MinWeight[v] = Weight(u, v)
				Parent[v] = u
	MST = {} - ребра минимального остовного дерева
	Для каждой вершины v графа G:
		Добавить ребро (v, Parent[v]) в MST
	Вернуть MST как результат
